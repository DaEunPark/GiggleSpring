<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.giggler.giggle.mj">
	
	<!-- 이메일 중복 확인하기 -->
	<select id="emailCheck" parameterType="String" resultType="Integer">
		<![CDATA[
		SELECT COUNT(*) FROM user WHERE user_email = #{user_email}
		]]>
	</select>

	<!-- 닉네임 중복 확인하기 -->
	<select id="nickCheck" parameterType="String" resultType="Integer">
		<![CDATA[
		SELECT COUNT(*) FROM user WHERE user_nick = #{user_nick}
		]]>
	</select>
	
	<!-- 회원 등록하기 -->
	<insert id="userRegister" parameterType="com.giggler.giggle.dto.UserDTO">
		<![CDATA[
		INSERT INTO user (user_email, user_pwd, user_nick, user_birth, user_phone, open_yn, naver_token)
		VALUES (#{user_email},  #{user_pwd}, #{user_nick}, #{user_birth}, #{user_phone}, #{open_yn}, #{naver_token})
		]]>
	</insert>

	<!-- 이메일로 UserDTO 가져오기 -->
	<select id="getUserDTOByEmail" parameterType="String" resultType="com.giggler.giggle.dto.UserDTO">
		<![CDATA[
		SELECT * FROM user WHERE user_email = #{user_email}
		]]>
	</select>
	
	<!-- 네이버 토큰으로 userDTO 가져오기 -->
	<select id="naverLogin" parameterType="String" resultType="com.giggler.giggle.dto.UserDTO">
		<![CDATA[
		SELECT * FROM user WHERE naver_token = #{naver_token}
		]]>
	</select>
	
	<!-- 회원 번호로 AlarmDTO List 가져오기 -->
	<select id="getAlarmListByUserNo" parameterType="Integer" resultType="com.giggler.giggle.dto.AlarmDTO">
		<![CDATA[
		SELECT u2.user_nick alarm_user_nick, a.alarm_no, a.user_no, a.alarm_type, a.alarm_date, a.read_yn
		FROM alarm a, user u1, user u2
		WHERE a.user_no = u1.user_no
		AND a.alarm_user = u2.user_no
		AND a.user_no = #{user_no}
		ORDER BY a.alarm_date
		]]>	
	</select>
	
	<!-- 회원 번호로 채팅방리스트 가져오기 -->
	<select id="getChatRoomListByUserNo" parameterType="Integer" resultType="com.giggler.giggle.dto.ChatRoomDTO">
		<![CDATA[
		SELECT c.chatroom_no chatroom_no, c.user1 user1, c.user2 user2, IFNULL(m.message_content, '대화를 시작해보세요!') recent_message 
		FROM chatroom c LEFT OUTER JOIN
		(SELECT  message_content, chatroom_no FROM  message WHERE message_no IN
		(SELECT MAX(message_no) FROM message GROUP BY chatroom_no) ORDER BY message_no DESC) 
		AS m ON (c.chatroom_no = m.chatroom_no)
		WHERE c.user1 = #{user_no} or c.user2 = #{user_no}
		]]>
	</select>
	
	<!-- 채팅방 상대방 정보 가져오기 -->
	<select id="getUserForChatRoom" parameterType="Integer" resultType="com.giggler.giggle.dto.ChatRoomDTO">
		<![CDATA[
		SELECT user_nick, profile_image FROM user WHERE user_no = #{otherUser}
		]]>
	</select>
	<!-- 키워드로 유저 리스트 구하기 -->
	<select id="searchUser" parameterType="String" resultType="com.giggler.giggle.dto.UserDTO">
		<![CDATA[
		SELECT * FROM user
		WHERE user_nick LIKE CONCAT('%', #{keyword}, '%')
		]]>
	</select>
	
	<!-- 두개의 유저 넘버로 채팅방 데이터 추가하기 -->
	<insert id="addChatRoom" parameterType="com.giggler.giggle.dto.ChatRoomDTO">
		<![CDATA[
		INSERT INTO chatroom (user1, user2) VALUES (#{user1}, #{user2})
		]]>
	</insert>
	
	<!-- 두개의 유저 넘버로 채팅방 데이터 가져오기 -->
	<select id="getChatRoom" parameterType="com.giggler.giggle.dto.ChatRoomDTO" resultType="com.giggler.giggle.dto.ChatRoomDTO">
		<![CDATA[
		SELECT c.chatroom_no chatroom_no, c.user1 user1, c.user2 user2, IFNULL(m.message_content, '대화를 시작해보세요!') recent_message 
		FROM chatroom c LEFT OUTER JOIN
		(SELECT  message_content, chatroom_no FROM  message WHERE message_no IN
		(SELECT MAX(message_no) FROM message GROUP BY chatroom_no) ORDER BY message_no DESC) 
		AS m ON (c.chatroom_no = m.chatroom_no)
		WHERE (user1 = #{user1} and user2 = #{user2}) or (user1 = #{user2} and user2 = #{user1})
		]]>
	</select>
	
	<!-- 채팅방 번호에 해당하는 메세지 리스트 가져오기 -->
	<select id="getMessageList" parameterType="Integer" resultType="com.giggler.giggle.dto.MessageDTO">
		<![CDATA[
		SELECT * FROM message
		WHERE chatroom_no = #{chatroom_no}
		ORDER BY message_sendtime
		]]>
	</select>
	
	<!-- 채팅방에 메세지 추가하기 -->
	<insert id="addMessage" parameterType="com.giggler.giggle.dto.MessageDTO">
		<![CDATA[
		INSERT INTO message (chatroom_no, user_no, message_content, message_sendtime)
		VALUES (#{chatroom_no}, #{user_no}, #{message_content}, now())
		]]>
	</insert>

</mapper>   





